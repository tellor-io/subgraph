// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewTellorAddress extends ethereum.Event {
  get params(): NewTellorAddress__Params {
    return new NewTellorAddress__Params(this);
  }
}

export class NewTellorAddress__Params {
  _event: NewTellorAddress;

  constructor(event: NewTellorAddress) {
    this._event = event;
  }

  get _newTellor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Contract__getVariablesOnDeckResult {
  value0: BigInt;
  value1: BigInt;
  value2: string;

  constructor(value0: BigInt, value1: BigInt, value2: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    return map;
  }
}

export class Contract__getLastNewValueByIdResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class Contract__getStakerInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Contract__getCurrentVariablesResult {
  value0: Bytes;
  value1: BigInt;
  value2: BigInt;
  value3: string;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: Bytes,
    value1: BigInt,
    value2: BigInt,
    value3: string,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Contract__getAllDisputeVarsResult {
  value0: Bytes;
  value1: boolean;
  value2: boolean;
  value3: boolean;
  value4: Address;
  value5: Address;
  value6: Address;
  value7: Array<BigInt>;
  value8: BigInt;

  constructor(
    value0: Bytes,
    value1: boolean,
    value2: boolean,
    value3: boolean,
    value4: Address,
    value5: Address,
    value6: Address,
    value7: Array<BigInt>,
    value8: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigIntArray(this.value7));
    map.set("value8", ethereum.Value.fromSignedBigInt(this.value8));
    return map;
  }
}

export class Contract__getRequestVarsResult {
  value0: string;
  value1: string;
  value2: Bytes;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: string,
    value1: string,
    value2: Bytes,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class Contract__getLastNewValueResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getRequestIdByTimestamp(_timestamp: BigInt): BigInt {
    let result = super.call(
      "getRequestIdByTimestamp",
      "getRequestIdByTimestamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_timestamp)]
    );

    return result[0].toBigInt();
  }

  try_getRequestIdByTimestamp(_timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRequestIdByTimestamp",
      "getRequestIdByTimestamp(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSubmissionsByTimestamp(
    _requestId: BigInt,
    _timestamp: BigInt
  ): Array<BigInt> {
    let result = super.call(
      "getSubmissionsByTimestamp",
      "getSubmissionsByTimestamp(uint256,uint256):(uint256[5])",
      [
        ethereum.Value.fromUnsignedBigInt(_requestId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getSubmissionsByTimestamp(
    _requestId: BigInt,
    _timestamp: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getSubmissionsByTimestamp",
      "getSubmissionsByTimestamp(uint256,uint256):(uint256[5])",
      [
        ethereum.Value.fromUnsignedBigInt(_requestId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAddressVars(_data: Bytes): Address {
    let result = super.call(
      "getAddressVars",
      "getAddressVars(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_data)]
    );

    return result[0].toAddress();
  }

  try_getAddressVars(_data: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAddressVars",
      "getAddressVars(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_data)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSymbol(): string {
    let result = super.call("getSymbol", "getSymbol():(string)", []);

    return result[0].toString();
  }

  try_getSymbol(): ethereum.CallResult<string> {
    let result = super.tryCall("getSymbol", "getSymbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getName(): string {
    let result = super.call("getName", "getName():(string)", []);

    return result[0].toString();
  }

  try_getName(): ethereum.CallResult<string> {
    let result = super.tryCall("getName", "getName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVariablesOnDeck(): Contract__getVariablesOnDeckResult {
    let result = super.call(
      "getVariablesOnDeck",
      "getVariablesOnDeck():(uint256,uint256,string)",
      []
    );

    return new Contract__getVariablesOnDeckResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toString()
    );
  }

  try_getVariablesOnDeck(): ethereum.CallResult<
    Contract__getVariablesOnDeckResult
  > {
    let result = super.tryCall(
      "getVariablesOnDeck",
      "getVariablesOnDeck():(uint256,uint256,string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getVariablesOnDeckResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toString()
      )
    );
  }

  getRequestIdByQueryHash(_request: Bytes): BigInt {
    let result = super.call(
      "getRequestIdByQueryHash",
      "getRequestIdByQueryHash(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_request)]
    );

    return result[0].toBigInt();
  }

  try_getRequestIdByQueryHash(_request: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRequestIdByQueryHash",
      "getRequestIdByQueryHash(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_request)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastNewValueById(_requestId: BigInt): Contract__getLastNewValueByIdResult {
    let result = super.call(
      "getLastNewValueById",
      "getLastNewValueById(uint256):(uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_requestId)]
    );

    return new Contract__getLastNewValueByIdResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_getLastNewValueById(
    _requestId: BigInt
  ): ethereum.CallResult<Contract__getLastNewValueByIdResult> {
    let result = super.tryCall(
      "getLastNewValueById",
      "getLastNewValueById(uint256):(uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(_requestId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getLastNewValueByIdResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }

  isInDispute(_requestId: BigInt, _timestamp: BigInt): boolean {
    let result = super.call(
      "isInDispute",
      "isInDispute(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_requestId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBoolean();
  }

  try_isInDispute(
    _requestId: BigInt,
    _timestamp: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isInDispute",
      "isInDispute(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_requestId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getNewValueCountbyRequestId(_requestId: BigInt): BigInt {
    let result = super.call(
      "getNewValueCountbyRequestId",
      "getNewValueCountbyRequestId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_requestId)]
    );

    return result[0].toBigInt();
  }

  try_getNewValueCountbyRequestId(
    _requestId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNewValueCountbyRequestId",
      "getNewValueCountbyRequestId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_requestId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfAt(_user: Address, _blockNumber: BigInt): BigInt {
    let result = super.call(
      "balanceOfAt",
      "balanceOfAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOfAt(
    _user: Address,
    _blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOfAt",
      "balanceOfAt(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUintVar(_data: Bytes): BigInt {
    let result = super.call("getUintVar", "getUintVar(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(_data)
    ]);

    return result[0].toBigInt();
  }

  try_getUintVar(_data: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getUintVar", "getUintVar(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(_data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRequestIdByRequestQIndex(_index: BigInt): BigInt {
    let result = super.call(
      "getRequestIdByRequestQIndex",
      "getRequestIdByRequestQIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toBigInt();
  }

  try_getRequestIdByRequestQIndex(_index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRequestIdByRequestQIndex",
      "getRequestIdByRequestQIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  didMine(_challenge: Bytes, _miner: Address): boolean {
    let result = super.call("didMine", "didMine(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(_challenge),
      ethereum.Value.fromAddress(_miner)
    ]);

    return result[0].toBoolean();
  }

  try_didMine(
    _challenge: Bytes,
    _miner: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("didMine", "didMine(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(_challenge),
      ethereum.Value.fromAddress(_miner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getMinersByRequestIdAndTimestamp(
    _requestId: BigInt,
    _timestamp: BigInt
  ): Array<Address> {
    let result = super.call(
      "getMinersByRequestIdAndTimestamp",
      "getMinersByRequestIdAndTimestamp(uint256,uint256):(address[5])",
      [
        ethereum.Value.fromUnsignedBigInt(_requestId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getMinersByRequestIdAndTimestamp(
    _requestId: BigInt,
    _timestamp: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getMinersByRequestIdAndTimestamp",
      "getMinersByRequestIdAndTimestamp(uint256,uint256):(address[5])",
      [
        ethereum.Value.fromUnsignedBigInt(_requestId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  balanceOf(_user: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerInfo(_staker: Address): Contract__getStakerInfoResult {
    let result = super.call(
      "getStakerInfo",
      "getStakerInfo(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_staker)]
    );

    return new Contract__getStakerInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getStakerInfo(
    _staker: Address
  ): ethereum.CallResult<Contract__getStakerInfoResult> {
    let result = super.tryCall(
      "getStakerInfo",
      "getStakerInfo(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_staker)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getStakerInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getTimestampbyRequestIDandIndex(_requestID: BigInt, _index: BigInt): BigInt {
    let result = super.call(
      "getTimestampbyRequestIDandIndex",
      "getTimestampbyRequestIDandIndex(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_requestID),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTimestampbyRequestIDandIndex(
    _requestID: BigInt,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimestampbyRequestIDandIndex",
      "getTimestampbyRequestIDandIndex(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_requestID),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDisputeUintVars(_disputeId: BigInt, _data: Bytes): BigInt {
    let result = super.call(
      "getDisputeUintVars",
      "getDisputeUintVars(uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_disputeId),
        ethereum.Value.fromFixedBytes(_data)
      ]
    );

    return result[0].toBigInt();
  }

  try_getDisputeUintVars(
    _disputeId: BigInt,
    _data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDisputeUintVars",
      "getDisputeUintVars(uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_disputeId),
        ethereum.Value.fromFixedBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  retrieveData(_requestId: BigInt, _timestamp: BigInt): BigInt {
    let result = super.call(
      "retrieveData",
      "retrieveData(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_requestId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_retrieveData(
    _requestId: BigInt,
    _timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "retrieveData",
      "retrieveData(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_requestId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowedToTrade(_user: Address, _amount: BigInt): boolean {
    let result = super.call(
      "allowedToTrade",
      "allowedToTrade(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_allowedToTrade(
    _user: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowedToTrade",
      "allowedToTrade(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCurrentVariables(): Contract__getCurrentVariablesResult {
    let result = super.call(
      "getCurrentVariables",
      "getCurrentVariables():(bytes32,uint256,uint256,string,uint256,uint256)",
      []
    );

    return new Contract__getCurrentVariablesResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toString(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getCurrentVariables(): ethereum.CallResult<
    Contract__getCurrentVariablesResult
  > {
    let result = super.tryCall(
      "getCurrentVariables",
      "getCurrentVariables():(bytes32,uint256,uint256,string,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getCurrentVariablesResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toString(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  didVote(_disputeId: BigInt, _address: Address): boolean {
    let result = super.call("didVote", "didVote(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_disputeId),
      ethereum.Value.fromAddress(_address)
    ]);

    return result[0].toBoolean();
  }

  try_didVote(
    _disputeId: BigInt,
    _address: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("didVote", "didVote(uint256,address):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_disputeId),
      ethereum.Value.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAllDisputeVars(_disputeId: BigInt): Contract__getAllDisputeVarsResult {
    let result = super.call(
      "getAllDisputeVars",
      "getAllDisputeVars(uint256):(bytes32,bool,bool,bool,address,address,address,uint256[9],int256)",
      [ethereum.Value.fromUnsignedBigInt(_disputeId)]
    );

    return new Contract__getAllDisputeVarsResult(
      result[0].toBytes(),
      result[1].toBoolean(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toAddress(),
      result[7].toBigIntArray(),
      result[8].toBigInt()
    );
  }

  try_getAllDisputeVars(
    _disputeId: BigInt
  ): ethereum.CallResult<Contract__getAllDisputeVarsResult> {
    let result = super.tryCall(
      "getAllDisputeVars",
      "getAllDisputeVars(uint256):(bytes32,bool,bool,bool,address,address,address,uint256[9],int256)",
      [ethereum.Value.fromUnsignedBigInt(_disputeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getAllDisputeVarsResult(
        value[0].toBytes(),
        value[1].toBoolean(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toAddress(),
        value[7].toBigIntArray(),
        value[8].toBigInt()
      )
    );
  }

  getRequestQ(): Array<BigInt> {
    let result = super.call("getRequestQ", "getRequestQ():(uint256[51])", []);

    return result[0].toBigIntArray();
  }

  try_getRequestQ(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getRequestQ",
      "getRequestQ():(uint256[51])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getMinedBlockNum(_requestId: BigInt, _timestamp: BigInt): BigInt {
    let result = super.call(
      "getMinedBlockNum",
      "getMinedBlockNum(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_requestId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_getMinedBlockNum(
    _requestId: BigInt,
    _timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMinedBlockNum",
      "getMinedBlockNum(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_requestId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDisputeIdByDisputeHash(_hash: Bytes): BigInt {
    let result = super.call(
      "getDisputeIdByDisputeHash",
      "getDisputeIdByDisputeHash(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_hash)]
    );

    return result[0].toBigInt();
  }

  try_getDisputeIdByDisputeHash(_hash: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDisputeIdByDisputeHash",
      "getDisputeIdByDisputeHash(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_hash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(_user: Address, _spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    _user: Address,
    _spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_user), ethereum.Value.fromAddress(_spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRequestUintVars(_requestId: BigInt, _data: Bytes): BigInt {
    let result = super.call(
      "getRequestUintVars",
      "getRequestUintVars(uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_requestId),
        ethereum.Value.fromFixedBytes(_data)
      ]
    );

    return result[0].toBigInt();
  }

  try_getRequestUintVars(
    _requestId: BigInt,
    _data: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRequestUintVars",
      "getRequestUintVars(uint256,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_requestId),
        ethereum.Value.fromFixedBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRequestVars(_requestId: BigInt): Contract__getRequestVarsResult {
    let result = super.call(
      "getRequestVars",
      "getRequestVars(uint256):(string,string,bytes32,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_requestId)]
    );

    return new Contract__getRequestVarsResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toBytes(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_getRequestVars(
    _requestId: BigInt
  ): ethereum.CallResult<Contract__getRequestVarsResult> {
    let result = super.tryCall(
      "getRequestVars",
      "getRequestVars(uint256):(string,string,bytes32,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_requestId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getRequestVarsResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toBytes(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  getLastNewValue(): Contract__getLastNewValueResult {
    let result = super.call(
      "getLastNewValue",
      "getLastNewValue():(uint256,bool)",
      []
    );

    return new Contract__getLastNewValueResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_getLastNewValue(): ethereum.CallResult<Contract__getLastNewValueResult> {
    let result = super.tryCall(
      "getLastNewValue",
      "getLastNewValue():(uint256,bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getLastNewValueResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }
}

export class ChangeDeityCall extends ethereum.Call {
  get inputs(): ChangeDeityCall__Inputs {
    return new ChangeDeityCall__Inputs(this);
  }

  get outputs(): ChangeDeityCall__Outputs {
    return new ChangeDeityCall__Outputs(this);
  }
}

export class ChangeDeityCall__Inputs {
  _call: ChangeDeityCall;

  constructor(call: ChangeDeityCall) {
    this._call = call;
  }

  get _newDeity(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeDeityCall__Outputs {
  _call: ChangeDeityCall;

  constructor(call: ChangeDeityCall) {
    this._call = call;
  }
}

export class ChangeTellorContractCall extends ethereum.Call {
  get inputs(): ChangeTellorContractCall__Inputs {
    return new ChangeTellorContractCall__Inputs(this);
  }

  get outputs(): ChangeTellorContractCall__Outputs {
    return new ChangeTellorContractCall__Outputs(this);
  }
}

export class ChangeTellorContractCall__Inputs {
  _call: ChangeTellorContractCall;

  constructor(call: ChangeTellorContractCall) {
    this._call = call;
  }

  get _tellorContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeTellorContractCall__Outputs {
  _call: ChangeTellorContractCall;

  constructor(call: ChangeTellorContractCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tellorContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
